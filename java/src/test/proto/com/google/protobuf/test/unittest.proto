// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// A proto file we will use for unit testing.
//
// LINT: ALLOW_GROUPS, LEGACY_NAMES

syntax = "proto3";

// Some generic_services option(s) added automatically.
// See:  http://go/proto2-generic-services-default
option cc_generic_services = true; // auto-added
option java_generic_services = true; // auto-added
option py_generic_services = true; // auto-added
option cc_enable_arenas = true;

import "com/google/protobuf/test/unittest_import.proto";

// We don't put this in a package within proto2 because we need to make sure
// that the generated code doesn't depend on being in the proto2 namespace.
// In test_util.h we do "using namespace unittest = protobuf_unittest".
package protobuf_unittest;

// Protos optimized for SPEED use a strict superset of the generated code
// of equivalent ones optimized for CODE_SIZE, so we should optimize all our
// tests for speed unless explicitly testing code size optimization.
option optimize_for = SPEED;

option java_outer_classname = "UnittestProto";

// This proto includes every type of field in both singular and repeated
// forms.
message TestAllTypes {
    message NestedMessage {
        // The field name "b" fails to compile in proto1 because it conflicts with
        // a local variable named "b" in one of the generated methods.  Doh.
        // This file needs to compile in proto1 to test backwards-compatibility.
        int32 bb = 1;
    }

    enum NestedEnum {
        FOO = 0;
        BAR = 1;
        BAZ = 2;
        NEG = -1; // Intentionally negative.
    }

    // Singular
    int32 optional_int32 = 1;
    int64 optional_int64 = 2;
    uint32 optional_uint32 = 3;
    uint64 optional_uint64 = 4;
    sint32 optional_sint32 = 5;
    sint64 optional_sint64 = 6;
    fixed32 optional_fixed32 = 7;
    fixed64 optional_fixed64 = 8;
    sfixed32 optional_sfixed32 = 9;
    sfixed64 optional_sfixed64 = 10;
    float optional_float = 11;
    double optional_double = 12;
    bool optional_bool = 13;
    string optional_string = 14;
    bytes optional_bytes = 15;

    NestedMessage optional_nested_message = 18;
    ForeignMessage optional_foreign_message = 19;
    protobuf_unittest_import.ImportMessage optional_import_message = 20;

    NestedEnum optional_nested_enum = 21;
    ForeignEnum optional_foreign_enum = 22;
    protobuf_unittest_import.ImportEnum optional_import_enum = 23;

    string optional_string_piece = 24;
    string optional_cord = 25;

    // Defined in unittest_import_public.proto
    protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;

    NestedMessage optional_lazy_message = 27 [lazy = true];

    // Repeated
    repeated int32 repeated_int32 = 31;
    repeated int64 repeated_int64 = 32;
    repeated uint32 repeated_uint32 = 33;
    repeated uint64 repeated_uint64 = 34;
    repeated sint32 repeated_sint32 = 35;
    repeated sint64 repeated_sint64 = 36;
    repeated fixed32 repeated_fixed32 = 37;
    repeated fixed64 repeated_fixed64 = 38;
    repeated sfixed32 repeated_sfixed32 = 39;
    repeated sfixed64 repeated_sfixed64 = 40;
    repeated float repeated_float = 41;
    repeated double repeated_double = 42;
    repeated bool repeated_bool = 43;
    repeated string repeated_string = 44;
    repeated bytes repeated_bytes = 45;

    repeated NestedMessage repeated_nested_message = 48;
    repeated ForeignMessage repeated_foreign_message = 49;
    repeated protobuf_unittest_import.ImportMessage repeated_import_message = 50;

    repeated NestedEnum repeated_nested_enum = 51;
    repeated ForeignEnum repeated_foreign_enum = 52;
    repeated protobuf_unittest_import.ImportEnum repeated_import_enum = 53;

    repeated string repeated_string_piece = 54;
    repeated string repeated_cord = 55;

    repeated NestedMessage repeated_lazy_message = 57 [lazy = true];

    // Singular with defaults
    int32 default_int32 = 61;
    int64 default_int64 = 62;
    uint32 default_uint32 = 63;
    uint64 default_uint64 = 64;
    sint32 default_sint32 = 65;
    sint64 default_sint64 = 66;
    fixed32 default_fixed32 = 67;
    fixed64 default_fixed64 = 68;
    sfixed32 default_sfixed32 = 69;
    sfixed64 default_sfixed64 = 70;
    float default_float = 71;
    double default_double = 72;
    bool default_bool = 73;
    string default_string = 74;
    bytes default_bytes = 75;

    NestedEnum default_nested_enum = 81;
    ForeignEnum default_foreign_enum = 82;
    protobuf_unittest_import.ImportEnum default_import_enum = 83;

    string default_string_piece = 84;
    string default_cord = 85;

    // For oneof test
    oneof oneof_field {
        uint32 oneof_uint32 = 111;
        NestedMessage oneof_nested_message = 112;
        string oneof_string = 113;
        bytes oneof_bytes = 114;
    }
}

// This proto includes a recusively nested message.
message NestedTestAllTypes {
    NestedTestAllTypes child = 1;
    TestAllTypes payload = 2;
    repeated NestedTestAllTypes repeated_child = 3;
}

message TestDeprecatedFields {
    int32 deprecated_int32 = 1 [deprecated = true];
    oneof oneof_fields {
        int32 deprecated_int32_in_oneof = 2 [deprecated = true];
    }
}

message TestDeprecatedMessage {
    option deprecated = true;
}

// Define these after TestAllTypes to make sure the compiler can handle
// that.
message ForeignMessage {
    int32 c = 1;
    int32 d = 2;
}

enum ForeignEnum {
    FOREIGN_FOO = 0;
    FOREIGN_BAR = 1;
    FOREIGN_BAZ = 2;
}

message TestReservedFields {
    reserved 2, 15, 9 to 11;
    reserved "bar", "baz";
}

message TestGroup {
    ForeignEnum optional_foreign_enum = 22;
}

// Test that we can use NestedMessage from outside TestAllTypes.
message TestForeignNested {
    TestAllTypes.NestedMessage foreign_nested = 1;
}

// TestEmptyMessage is used to test unknown field support.
message TestEmptyMessage {
}

// Needed for a Python test.
message TestPickleNestedMessage {
    message NestedMessage {
        int32 bb = 1;
        message NestedNestedMessage {
            int32 cc = 1;
        }
    }
}

// Test that really large tag numbers don't break anything.
message TestReallyLargeTagNumber {
    // The largest possible tag number is 2^28 - 1, since the wire format uses
    // three bits to communicate wire type.
    int32 a = 1;
    int32 bb = 268435455;
}

message TestRecursiveMessage {
    TestRecursiveMessage a = 1;
    int32 i = 2;
}

// Test that mutual recursion works.
message TestMutualRecursionA {
    message SubMessage {
        TestMutualRecursionB b = 1;
    }
    TestMutualRecursionB bb = 1;
}

message TestMutualRecursionB {
    TestMutualRecursionA a = 1;
    int32 optional_int32 = 2;
}

message TestIsInitialized {
    message SubMessage {
    }
    SubMessage sub_message = 1;
}

// Additional messages for testing lazy fields.
message TestEagerMessage {
    TestAllTypes sub_message = 1 [lazy = false];
}
message TestLazyMessage {
    TestAllTypes sub_message = 1 [lazy = true];
}

// Needed for a Python test.
message TestNestedMessageHasBits {
    message NestedMessage {
        repeated int32 nestedmessage_repeated_int32 = 1;
        repeated ForeignMessage nestedmessage_repeated_foreignmessage = 2;
    }
    NestedMessage optional_nested_message = 1;
}

// Test message with CamelCase field names.  This violates Protocol Buffer
// standard style.
message TestCamelCaseFieldNames {
    int32 PrimitiveField = 1;
    string StringField = 2;
    ForeignEnum EnumField = 3;
    ForeignMessage MessageField = 4;
    string StringPieceField = 5;
    string CordField = 6;

    repeated int32 RepeatedPrimitiveField = 7;
    repeated string RepeatedStringField = 8;
    repeated ForeignEnum RepeatedEnumField = 9;
    repeated ForeignMessage RepeatedMessageField = 10;
    repeated string RepeatedStringPieceField = 11;
    repeated string RepeatedCordField = 12;
}

// We list fields out of order, to ensure that we're using field number and not
// field index to determine serialization order.
message TestFieldOrderings {
    string my_string = 11;
    int64 my_int = 1;
    float my_float = 101;
    message NestedMessage {
        int64 oo = 2;
        // The field name "b" fails to compile in proto1 because it conflicts with
        // a local variable named "b" in one of the generated methods.  Doh.
        // This file needs to compile in proto1 to test backwards-compatibility.
        int32 bb = 1;
    }

    NestedMessage optional_nested_message = 200;
}


message TestExtremeDefaultValues {
    bytes escaped_bytes = 1;
    uint32 large_uint32 = 2;
    uint64 large_uint64 = 3;
    int32 small_int32 = 4;
    int64 small_int64 = 5;
    int32 really_small_int32 = 21;
    int64 really_small_int64 = 22;

    // The default value here is UTF-8 for "\u1234".  (We could also just type
    // the UTF-8 text directly into this text file rather than escape it, but
    // lots of people use editors that would be confused by this.)
    string utf8_string = 6;

    // Tests for single-precision floating-point values.
    float zero_float = 7;
    float one_float = 8;
    float small_float = 9;
    float negative_one_float = 10;
    float negative_float = 11;
    // Using exponents
    float large_float = 12;
    float small_negative_float = 13;

    // Text for nonfinite floating-point values.
    double inf_double = 14;
    double neg_inf_double = 15;
    double nan_double = 16;
    float inf_float = 17;
    float neg_inf_float = 18;
    float nan_float = 19;

    // Tests for C++ trigraphs.
    // Trigraphs should be escaped in C++ generated files, but they should not be
    // escaped for other languages.
    // Note that in .proto file, "\?" is a valid way to escape ? in string
    // literals.
    string cpp_trigraph = 20;

    // String defaults containing the character '\000'
    string string_with_zero = 23;
    bytes bytes_with_zero = 24;
    string string_piece_with_zero = 25;
    string cord_with_zero = 26;
    string replacement_string = 27;
}

// Test String and Bytes: string is for valid UTF-8 strings
message OneString {
    string data = 1;
}

message MoreString {
    repeated string data = 1;
}

message OneBytes {
    bytes data = 1;
}

message MoreBytes {
    repeated bytes data = 1;
}

// Test int32, uint32, int64, uint64, and bool are all compatible
message Int32Message {
    int32 data = 1;
}

message Uint32Message {
    uint32 data = 1;
}

message Int64Message {
    int64 data = 1;
}

message Uint64Message {
    uint64 data = 1;
}

message BoolMessage {
    bool data = 1;
}

// Test oneofs.
message TestOneof {
    oneof foo {
        int32 foo_int = 1;
        string foo_string = 2;
        TestAllTypes foo_message = 3;
    }
}

message TestOneofBackwardsCompatible {
    int32 foo_int = 1;
    string foo_string = 2;
    TestAllTypes foo_message = 3;
}

message TestOneof2 {
    oneof foo {
        int32 foo_int = 1;
        string foo_string = 2;
        string foo_cord = 3;
        string foo_string_piece = 4;
        bytes foo_bytes = 5;
        NestedEnum foo_enum = 6;
        NestedMessage foo_message = 7;
        NestedMessage foo_lazy_message = 11 [lazy = true];
    }

    oneof bar {
        int32 bar_int = 12;
        string bar_string = 13;
        string bar_cord = 14;
        string bar_string_piece = 15;
        bytes bar_bytes = 16;
        NestedEnum bar_enum = 17;
    }

    int32 baz_int = 18;
    string baz_string = 19;

    message NestedMessage {
        int64 qux_int = 1;
        repeated int32 corge_int = 2;
    }

    enum NestedEnum {
        FOO = 0;
        BAR = 1;
        BAZ = 2;
    }
}

message TestRequiredOneof {
    oneof foo {
        int32 foo_int = 1;
        string foo_string = 2;
        NestedMessage foo_message = 3;
    }
    message NestedMessage {
        double required_double = 1;
    }
}

// Test messages for packed fields

message TestPackedTypes {
    repeated int32 packed_int32 = 90 [packed = true];
    repeated int64 packed_int64 = 91 [packed = true];
    repeated uint32 packed_uint32 = 92 [packed = true];
    repeated uint64 packed_uint64 = 93 [packed = true];
    repeated sint32 packed_sint32 = 94 [packed = true];
    repeated sint64 packed_sint64 = 95 [packed = true];
    repeated fixed32 packed_fixed32 = 96 [packed = true];
    repeated fixed64 packed_fixed64 = 97 [packed = true];
    repeated sfixed32 packed_sfixed32 = 98 [packed = true];
    repeated sfixed64 packed_sfixed64 = 99 [packed = true];
    repeated float packed_float = 100 [packed = true];
    repeated double packed_double = 101 [packed = true];
    repeated bool packed_bool = 102 [packed = true];
    repeated ForeignEnum packed_enum = 103 [packed = true];
}

// A message with the same fields as TestPackedTypes, but without packing. Used
// to test packed <-> unpacked wire compatibility.
message TestUnpackedTypes {
    repeated int32 unpacked_int32 = 90 [packed = false];
    repeated int64 unpacked_int64 = 91 [packed = false];
    repeated uint32 unpacked_uint32 = 92 [packed = false];
    repeated uint64 unpacked_uint64 = 93 [packed = false];
    repeated sint32 unpacked_sint32 = 94 [packed = false];
    repeated sint64 unpacked_sint64 = 95 [packed = false];
    repeated fixed32 unpacked_fixed32 = 96 [packed = false];
    repeated fixed64 unpacked_fixed64 = 97 [packed = false];
    repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
    repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
    repeated float unpacked_float = 100 [packed = false];
    repeated double unpacked_double = 101 [packed = false];
    repeated bool unpacked_bool = 102 [packed = false];
    repeated ForeignEnum unpacked_enum = 103 [packed = false];
}

message TestRepeatedScalarDifferentTagSizes {
    // Parsing repeated fixed size values used to fail. This message needs to be
    // used in order to get a tag of the right size; all of the repeated fields
    // in TestAllTypes didn't trigger the check.
    repeated fixed32 repeated_fixed32 = 12;
    // Check for a varint type, just for good measure.
    repeated int32 repeated_int32 = 13;

    // These have two-byte tags.
    repeated fixed64 repeated_fixed64 = 2046;
    repeated int64 repeated_int64 = 2047;

    // Three byte tags.
    repeated float repeated_float = 262142;
    repeated uint64 repeated_uint64 = 262143;
}

// Test that if an  or  message/group field appears multiple
// times in the input, they need to be merged.
message TestParsingMerge {
    // RepeatedFieldsGenerator defines matching field types as TestParsingMerge,
    // except that all fields are repeated. In the tests, we will serialize the
    // RepeatedFieldsGenerator to bytes, and parse the bytes to TestParsingMerge.
    // Repeated fields in RepeatedFieldsGenerator are expected to be merged into
    // the corresponding required/optional fields in TestParsingMerge.
    message RepeatedFieldsGenerator {
        repeated TestAllTypes field1 = 1;
        repeated TestAllTypes field2 = 2;
        repeated TestAllTypes field3 = 3;
        repeated TestAllTypes ext1 = 1000;
        repeated TestAllTypes ext2 = 1001;
    }
    TestAllTypes required_all_types = 1;
    TestAllTypes optional_all_types = 2;
    repeated TestAllTypes repeated_all_types = 3;
}

message TestCommentInjectionMessage {
    // */ <- This should not close the generated doc comment
    string a = 1;
}

// Test that RPC services work.
message FooRequest {
}
message FooResponse {
}

message FooClientMessage {
}
message FooServerMessage {
}

service TestService {
    rpc Foo (FooRequest) returns (FooResponse);
    rpc Bar (BarRequest) returns (BarResponse);
}


message BarRequest {
}
message BarResponse {
}

message TestJsonName {
    int32 field_name1 = 1;
    int32 fieldName2 = 2;
    int32 FieldName3 = 3;
    int32 _field_name4 = 4;
    int32 FIELD_NAME5 = 5;
    int32 field_name6 = 6 [json_name = "@type"];
}

message TestHugeFieldNumbers {
    int32 optional_int32 = 536870000;
    int32 fixed_32 = 536870001;
    repeated int32 repeated_int32 = 536870002 [packed = false];
    repeated int32 packed_int32 = 536870003 [packed = true];

    ForeignEnum optional_enum = 536870004;
    string optional_string = 536870005;
    bytes optional_bytes = 536870006;
    ForeignMessage optional_message = 536870007;


    map<string, string> string_string_map = 536870010;

    oneof oneof_field {
        uint32 oneof_uint32 = 536870011;
        TestAllTypes oneof_test_all_types = 536870012;
        string oneof_string = 536870013;
        bytes oneof_bytes = 536870014;
    }


}

message TestExtensionInsideTable {
    int32 field1 = 1;
    int32 field2 = 2;
    int32 field3 = 3;
    int32 field4 = 4;

    int32 field6 = 6;
    int32 field7 = 7;
    int32 field8 = 8;
    int32 field9 = 9;
    int32 field10 = 10;
}

enum VeryLargeEnum {
    ENUM_LABEL_DEFAULT = 0;
    ENUM_LABEL_1 = 1;
    ENUM_LABEL_2 = 2;
    ENUM_LABEL_3 = 3;
    ENUM_LABEL_4 = 4;
    ENUM_LABEL_5 = 5;
    ENUM_LABEL_6 = 6;
    ENUM_LABEL_7 = 7;
    ENUM_LABEL_8 = 8;
    ENUM_LABEL_9 = 9;
    ENUM_LABEL_10 = 10;
    ENUM_LABEL_11 = 11;
    ENUM_LABEL_12 = 12;
    ENUM_LABEL_13 = 13;
    ENUM_LABEL_14 = 14;
    ENUM_LABEL_15 = 15;
    ENUM_LABEL_16 = 16;
    ENUM_LABEL_17 = 17;
    ENUM_LABEL_18 = 18;
    ENUM_LABEL_19 = 19;
    ENUM_LABEL_20 = 20;
    ENUM_LABEL_21 = 21;
    ENUM_LABEL_22 = 22;
    ENUM_LABEL_23 = 23;
    ENUM_LABEL_24 = 24;
    ENUM_LABEL_25 = 25;
    ENUM_LABEL_26 = 26;
    ENUM_LABEL_27 = 27;
    ENUM_LABEL_28 = 28;
    ENUM_LABEL_29 = 29;
    ENUM_LABEL_30 = 30;
    ENUM_LABEL_31 = 31;
    ENUM_LABEL_32 = 32;
    ENUM_LABEL_33 = 33;
    ENUM_LABEL_34 = 34;
    ENUM_LABEL_35 = 35;
    ENUM_LABEL_36 = 36;
    ENUM_LABEL_37 = 37;
    ENUM_LABEL_38 = 38;
    ENUM_LABEL_39 = 39;
    ENUM_LABEL_40 = 40;
    ENUM_LABEL_41 = 41;
    ENUM_LABEL_42 = 42;
    ENUM_LABEL_43 = 43;
    ENUM_LABEL_44 = 44;
    ENUM_LABEL_45 = 45;
    ENUM_LABEL_46 = 46;
    ENUM_LABEL_47 = 47;
    ENUM_LABEL_48 = 48;
    ENUM_LABEL_49 = 49;
    ENUM_LABEL_50 = 50;
    ENUM_LABEL_51 = 51;
    ENUM_LABEL_52 = 52;
    ENUM_LABEL_53 = 53;
    ENUM_LABEL_54 = 54;
    ENUM_LABEL_55 = 55;
    ENUM_LABEL_56 = 56;
    ENUM_LABEL_57 = 57;
    ENUM_LABEL_58 = 58;
    ENUM_LABEL_59 = 59;
    ENUM_LABEL_60 = 60;
    ENUM_LABEL_61 = 61;
    ENUM_LABEL_62 = 62;
    ENUM_LABEL_63 = 63;
    ENUM_LABEL_64 = 64;
    ENUM_LABEL_65 = 65;
    ENUM_LABEL_66 = 66;
    ENUM_LABEL_67 = 67;
    ENUM_LABEL_68 = 68;
    ENUM_LABEL_69 = 69;
    ENUM_LABEL_70 = 70;
    ENUM_LABEL_71 = 71;
    ENUM_LABEL_72 = 72;
    ENUM_LABEL_73 = 73;
    ENUM_LABEL_74 = 74;
    ENUM_LABEL_75 = 75;
    ENUM_LABEL_76 = 76;
    ENUM_LABEL_77 = 77;
    ENUM_LABEL_78 = 78;
    ENUM_LABEL_79 = 79;
    ENUM_LABEL_80 = 80;
    ENUM_LABEL_81 = 81;
    ENUM_LABEL_82 = 82;
    ENUM_LABEL_83 = 83;
    ENUM_LABEL_84 = 84;
    ENUM_LABEL_85 = 85;
    ENUM_LABEL_86 = 86;
    ENUM_LABEL_87 = 87;
    ENUM_LABEL_88 = 88;
    ENUM_LABEL_89 = 89;
    ENUM_LABEL_90 = 90;
    ENUM_LABEL_91 = 91;
    ENUM_LABEL_92 = 92;
    ENUM_LABEL_93 = 93;
    ENUM_LABEL_94 = 94;
    ENUM_LABEL_95 = 95;
    ENUM_LABEL_96 = 96;
    ENUM_LABEL_97 = 97;
    ENUM_LABEL_98 = 98;
    ENUM_LABEL_99 = 99;
    ENUM_LABEL_100 = 100;
};
